openapi: 3.0.1
info:
  title: Your API Documentation
  description: Description of your API
  contact:
    name: Your name
    email: your@email.com
  version: v1
paths:
  /boat:
    get:
      tags:
        - Boat
      summary: Returns a list of all boats
      responses:
        '200':
          description: The request was successfull.
        '500':
          description: If there is an internal server error.
    post:
      tags:
        - Boat
      summary: Creates a new Boat by sending a Boat object
      description: "Sample request:\r\n\r\nPOST /boat\r\n\r\n{  \r\n\r\n    \"id\": int,                      // id of the Boat \r\n       \r\n    \"name\": string,                 // name of the boat\r\n        \r\n    \"class\": string,                // in what class boat competes\r\n    \r\n    \"sailNimber\": string,           // Sail number\r\n    \r\n    \"skipper\": string,              // name of the skipper\r\n    \r\n    \"ratingId\": int,                // id of the Rating\r\n    \r\n    \"rating\": {                     // can be one rating per boat \r\n    \r\n        \"id\": int,                  // id of the Rating\r\n        \r\n        \"baseRating\": int,          // rating of the boat\r\n        \r\n        \"spinnakerAdjustment\": int, // spinnaker adjustment configurations\r\n        \r\n        \"adjustment\": int,          \r\n        \r\n        \"currentRating\": int,       // current rating\r\n        \r\n        \"boats\": [ Boat ]           // can be many Boats\r\n        \r\n    },\r\n    \r\n    \"tracks\": [ Track ],            // can be many Tracks. Please refer to POST Track\r\n    \r\n    \"races\": [ Race ]               // can be many Races. Please refer to POST Race\r\n\r\n}"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Boat'
          text/json:
            schema:
              $ref: '#/components/schemas/Boat'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Boat'
      responses:
        '201':
          description: Boat created successfully.
        '400':
          description: If any of the required fields are missing or invalid.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
  /boat/{id}:
    get:
      tags:
        - Boat
      summary: Returns a specific boat
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Boat returned successfully.
        '500':
          description: If there is an internal server error.
    put:
      tags:
        - Boat
      summary: Updates a specific Boat
      description: "Sample request:\r\n\r\nPUT /boat/{id}\r\n\r\n{  \r\n\r\n    \"id\": int,                      // id of the Boat\r\n       \r\n    \"name\": string,                 // name of the boat\r\n        \r\n    \"class\": string,                // in what class boat competes\r\n    \r\n    \"sailNimber\": string,           // Sail number\r\n    \r\n    \"skipper\": string,              // name of the skipper\r\n    \r\n    \"ratingId\": int,                // id of the Rating\r\n    \r\n    \"rating\": {                     // can be one rating per boat \r\n    \r\n        \"id\": int,                  // id of the Rating\r\n        \r\n        \"baseRating\": int,          // rating of the boat\r\n        \r\n        \"spinnakerAdjustment\": int, // spinnaker adjustment configurations\r\n        \r\n        \"adjustment\": int,          \r\n        \r\n        \"currentRating\": int,       // current rating\r\n        \r\n        \"boats\": [ Boat ]           // can be many Boats\r\n        \r\n    },\r\n    \r\n    \"tracks\": [ Track ],            // can be many Tracks. Please refer to POST Track\r\n    \r\n    \"races\": [ Race ]               // can be many Races. Please refer to POST Race\r\n\r\n}"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Boat'
          text/json:
            schema:
              $ref: '#/components/schemas/Boat'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Boat'
      responses:
        '201':
          description: Boat updated successfully.
        '400':
          description: If any of the required fields are missing or invalid.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
  /course:
    post:
      tags:
        - Course
      summary: Creates a new Course by sending a Course object with CourseMarks
      description: "Sample request:\r\n\r\nPOST /course\r\n\r\n{  \r\n\r\n    \"id\": int,                      // id of the course\r\n    \r\n    \"name\": string,                 // Name of the course\r\n    \r\n    \"description\": string,          // Some notes about the course\r\n    \r\n    \"courseMarks\": [                // can be many CourseMarks\r\n       \r\n        {\r\n        \r\n            \"id\": int,              // id of the courseMark\r\n            \r\n            \"latitude\": float,      // latitude of the courseMark\r\n            \r\n            \"longitude\": float,     // longitude of the courseMark\r\n            \r\n            \"description\": string,  // some info about the courseMark\r\n            \r\n            \"rounding\": boolean,    // true if Sailers need to go clockwise around the courseMark and false is counter-clockwise (port for counter-clockwise, starboard for clockwise)\r\n            \r\n            \"isStartLine\": boolean, // true id the courseMark is one of the points of start line\r\n            \r\n            \"gateId\": id,           // a reference to another CourseMark that makes up a gate, if not gate - skip\r\n            \r\n            \"courseId\": int         // id of the Course the courseMark belongs to (omit this line, since MySql detects it)\r\n            \r\n        }]\r\n        \r\n}"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
          text/json:
            schema:
              $ref: '#/components/schemas/Course'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '201':
          description: Course created successfully.
        '400':
          description: If any of the required fields are missing or invalid.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
    get:
      tags:
        - Course
      summary: Returns a list of all courses and courseMarks
      responses:
        '200':
          description: list of all courses returned successfully.
        '500':
          description: If there is an internal server error.
  /course/{id}:
    get:
      tags:
        - Course
      summary: Returns a specific course
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Course returned successfully.
        '404':
          description: Course not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
    delete:
      tags:
        - Course
      summary: Deletes a specific course
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Course deleted successfully.
        '404':
          description: Course not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
    put:
      tags:
        - Course
      summary: Updates a Course by sending a Course object with CourseMarks
      description: "Sample request:\r\n\r\nPUT /course/{id}\r\n\r\n{  \r\n\r\n    \"id\": int,                      // id of the course\r\n    \r\n    \"name\": string,                 // Name of the course\r\n    \r\n    \"description\": string,          // Some notes about the course\r\n    \r\n    \"courseMarks\": [                // can be many CourseMarks\r\n       \r\n        {\r\n        \r\n            \"id\": int,              // id of the courseMark\r\n            \r\n            \"latitude\": float,      // latitude of the courseMark\r\n            \r\n            \"longitude\": float,     // longitude of the courseMark\r\n            \r\n            \"description\": string,  // some info about the courseMark\r\n            \r\n            \"rounding\": boolean,    // true if Sailers need to go clockwise around the courseMark and false is counter-clockwise (port for counter-clockwise, starboard for clockwise)\r\n            \r\n            \"isStartLine\": boolean, // true id the courseMark is one of the points of start line\r\n            \r\n            \"gateId\": id,           // a reference to another CourseMark that makes up a gate, if not gate - skip\r\n            \r\n            \"courseId\": int         // id of the Course the courseMark belongs to (omit this line, since MySql detects it)\r\n            \r\n        }]\r\n        \r\n}"
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCourseDTO'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateCourseDTO'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateCourseDTO'
      responses:
        '200':
          description: Course updated successfully.
        '404':
          description: Course not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
  /course/{id}/marks:
    get:
      tags:
        - Course
      summary: Returns a list of courseMarks from a specific course
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Action successfull.
        '404':
          description: Course not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
  /course/marks:
    post:
      tags:
        - Course
      summary: Creates CourseMarks for a specific Course
      description: "Sample request:\r\n\r\nPOST /marks\r\n\r\n{  \r\n        \r\n    \"id\": int,              // id of the courseMark\r\n            \r\n    \"latitude\": float,      // latitude of the courseMark\r\n            \r\n    \"longitude\": float,     // longitude of the courseMark\r\n            \r\n    \"description\": string,  // some info about the courseMark\r\n            \r\n    \"rounding\": boolean,    // true if Sailers need to go clockwise around the courseMark and false is counter-clockwise (port for counter-clockwise, starboard for clockwise)\r\n            \r\n    \"isStartLine\": boolean, // true id the courseMark is one of the points of start line\r\n            \r\n    \"gateId\": id,           // a reference to another CourseMark that makes up a gate, if not gate - skip\r\n            \r\n    \"courseId\": int         // id of the Course the courseMark belongs to (omit this line, since MySql detects it)\r\n    \r\n}"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseMark'
          text/json:
            schema:
              $ref: '#/components/schemas/CourseMark'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CourseMark'
      responses:
        '202':
          description: CourseMark created successfully.
        '400':
          description: If any of the required fields are missing or invalid.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Course not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
  /course/marks/{id}:
    put:
      tags:
        - Course
      summary: Updates CourseMarks for a specific Course
      description: "Sample request:\r\n\r\nPUT /marks/{id}\r\n\r\n{  \r\n        \r\n    \"id\": int,              // id of the courseMark\r\n            \r\n    \"latitude\": float,      // latitude of the courseMark\r\n            \r\n    \"longitude\": float,     // longitude of the courseMark\r\n            \r\n    \"description\": string,  // some info about the courseMark\r\n            \r\n    \"rounding\": boolean,    // true if Sailers need to go clockwise around the courseMark and false is counter-clockwise (port for counter-clockwise, starboard for clockwise)\r\n            \r\n    \"isStartLine\": boolean, // true id the courseMark is one of the points of start line\r\n            \r\n    \"gateId\": id,           // a reference to another CourseMark that makes up a gate, if not gate - skip\r\n            \r\n    \"courseId\": int         // id of the Course the courseMark belongs to (omit this line, since MySql detects it)\r\n    \r\n}"
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCourseMarkDTO'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateCourseMarkDTO'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateCourseMarkDTO'
      responses:
        '202':
          description: CourseMark updated successfully.
        '400':
          description: If any of the required fields are missing or invalid.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Course not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
    delete:
      tags:
        - Course
      summary: Deletes a courseMark
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: CourseMark deleted successfully.
        '404':
          description: CourseMark not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
  /race:
    post:
      tags:
        - Race
      summary: Creates a new Race by sending a Race object
      description: "Sample request:\r\n\r\nPOST /race\r\n\r\n{  \r\n\r\n    \"id\": int,                  // id of the race\r\n    \r\n    \"startTime\": dateTime,      // UTC start time of the race\r\n    \r\n    \"endTime\": dateTime,        // UTC end time of the race\r\n    \r\n    \"name\": string,              // Name of the race\r\n    \r\n    \"participants\": [ Boat ],    // can be many Boats. Please refer to POST Boat\r\n    \r\n    \"courses\": [ Course ],       // can be many Courses. Please refer to POST Course\r\n    \r\n    \"tracks\": [ Track ],         // can be many Tracks. Please refer to POST Track\r\n    \r\n    \"regattaId\": int            // id of the Regatta the race belongs to\r\n    \r\n}"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Race'
          text/json:
            schema:
              $ref: '#/components/schemas/Race'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Race'
      responses:
        '201':
          description: Race created successfully.
        '400':
          description: If any of the required fields are missing or invalid.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
    get:
      tags:
        - Race
      summary: Returns a list of all races
      responses:
        '200':
          description: list of all races returned successfully.
        '500':
          description: If there is an internal server error.
  /race/{id}:
    get:
      tags:
        - Race
      summary: Returns a specific Race
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Race returned successfully.
        '404':
          description: Race not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
    delete:
      tags:
        - Race
      summary: Deletes a specific Race
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Race deleted successfully.
        '404':
          description: Race not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
    put:
      tags:
        - Race
      summary: Update a Race by sending a Race object
      description: "Sample request:\r\n\r\nPUT /race/{id}\r\n\r\n{  \r\n\r\n    \"id\": int,                  // id of the race\r\n    \r\n    \"startTime\": dateTime,      // UTC start time of the race\r\n    \r\n    \"endTime\": dateTime,        // UTC end time of the race\r\n    \r\n    \"name\": string,              // Name of the race\r\n    \r\n    \"participants\": [ Boat ],    // can be many Boats. Please refer to POST Boat\r\n    \r\n    \"courses\": [ Course ],       // can be many Courses. Please refer to POST Course\r\n    \r\n    \"tracks\": [ Track ],         // can be many Tracks. Please refer to POST Track\r\n    \r\n    \"regattaId\": int            // id of the Regatta the race belongs to\r\n    \r\n}"
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Race'
          text/json:
            schema:
              $ref: '#/components/schemas/Race'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Race'
      responses:
        '200':
          description: Race updated successfully.
        '404':
          description: Race not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
  /race/{id}/participants:
    get:
      tags:
        - Race
      summary: Returns a list of all Boat objects in the specific race
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: list of Boat objects returned successfully.
        '404':
          description: Race not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
  /race/{id}/participant/{boat}:
    put:
      tags:
        - Race
      summary: Add a participant (Boat) id to a race id
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: boat
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '202':
          description: The request was successfull.
        '404':
          description: Race or Boat not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
    delete:
      tags:
        - Race
      summary: Delete a participant (Boat) id from a race id
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: boat
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '202':
          description: The request was successfull.
        '404':
          description: Race or Boat not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
  /race/{id}/results:
    get:
      tags:
        - Race
      summary: Returns a Result object from a specific race
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '202':
          description: The request was successfull.
        '404':
          description: Race not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
  /race/{id}/calculate/{baseBoat}/{B}:
    get:
      tags:
        - Race
      summary: Returns a Result difference for a boat(B) based on boat(baseBoat) from a specific race(id)
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: baseBoat
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: B
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '202':
          description: The request was successfull.
        '404':
          description: Race or Boat not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
  /regatta:
    post:
      tags:
        - Regatta
      summary: Creates a regatta
      description: "Sample request:\r\n\r\nPOST regatta\r\n\r\n{  \r\n\r\n    \"id\": int,                  // id of the regatta\r\n            \r\n    \"name\": string,             // Name of the regatta\r\n    \r\n    \"description\": string,      // details of the regatta\r\n    \r\n    \"races\": [ Race ]           // can be many Races. Please refer to POST Race\r\n    \r\n}"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Regatta'
          text/json:
            schema:
              $ref: '#/components/schemas/Regatta'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Regatta'
      responses:
        '201':
          description: Regatta created successfully.
        '400':
          description: If any of the required fields are missing or invalid.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
    get:
      tags:
        - Regatta
      summary: List of all regattas
      responses:
        '200':
          description: Action successfull.
        '500':
          description: If there is an internal server error.
  /regatta/{id}:
    get:
      tags:
        - Regatta
      summary: Get all data for the specified regatta
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Action successfull.
        '404':
          description: Reggatta not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
    put:
      tags:
        - Regatta
      summary: Update specific regatta
      description: "Sample request:\r\n\r\nPUT /regatta/{id}\r\n\r\n{  \r\n\r\n    \"id\": int,                  // id of the regatta\r\n            \r\n    \"name\": string,             // Name of the regatta\r\n    \r\n    \"description\": string,      // details of the regatta\r\n    \r\n    \"races\": [ Race ]           // can be many Races. Please refer to POST Race\r\n    \r\n}"
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Regatta'
          text/json:
            schema:
              $ref: '#/components/schemas/Regatta'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Regatta'
      responses:
        '200':
          description: Regatta updated successfully.
        '404':
          description: Regatta not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
    delete:
      tags:
        - Regatta
      summary: Delete regatta
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Regatta deleted successfully.
        '404':
          description: Regatta not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
  /regatta/{id}/races/{raceId}:
    put:
      tags:
        - Regatta
      summary: Adding a race to regatta
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: raceId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Race added to regatta successfully.
        '404':
          description: Regatta or Race not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
    delete:
      tags:
        - Regatta
      summary: Deleting a race from regatta
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: raceId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Race deleted from regatta successfully.
        '404':
          description: Regatta or Race not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
  /regatta/{id}/results:
    get:
      tags:
        - Regatta
      summary: Returns a table of results
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Action successfull.
        '404':
          description: Regatta not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
  /track:
    post:
      tags:
        - TrackControllers
      summary: Creates a track
      description: "Sample request:\r\n\r\nPOST /track\r\n\r\n{  \r\n\r\n    \"id\": int,                  // id of the track\r\n    \r\n    \"boatId\": int,              // id of the boat track belongs to\r\n    \r\n    \"raceId\": int,              // id of the race the boat was tracked\r\n    \r\n    \"started\": dateTime,        // UTC start time of the race \r\n    \r\n    \"finished\": dateTime,       // UTC end time of the race\r\n    \r\n    \"distance\": float,          // distance covered by the boat\r\n    \r\n    \"gpxData\": string,          // XML file from the GPS tracker\r\n    \r\n    \"currentRating\": int        // current rating of the boat\r\n    \r\n}"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Track'
          text/json:
            schema:
              $ref: '#/components/schemas/Track'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Track'
      responses:
        '201':
          description: Track created successfully.
        '400':
          description: If any of the required fields are missing or invalid.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
  /track/race/{id}:
    get:
      tags:
        - TrackControllers
      summary: Gets all the tracks for the specific race
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Action successfull.
        '500':
          description: If there is an internal server error.
  /track/{id}:
    get:
      tags:
        - TrackControllers
      summary: Gets a specific track
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Action successfull.
        '404':
          description: Track not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
    put:
      tags:
        - TrackControllers
      summary: Updates a track
      description: "Sample request:\r\n\r\nPUT /track/{id}\r\n\r\n{  \r\n\r\n    \"id\": int,                  // id of the track\r\n    \r\n    \"boatId\": int,              // id of the boat track belongs to\r\n    \r\n    \"raceId\": int,              // id of the race the boat was tracked\r\n    \r\n    \"started\": dateTime,        // UTC start time of the race \r\n    \r\n    \"finished\": dateTime,       // UTC end time of the race\r\n    \r\n    \"distance\": float,          // distance covered by the boat\r\n    \r\n    \"gpxData\": string,          // XML file from the GPS tracker\r\n    \r\n    \"currentRating\": int        // current rating of the boat\r\n    \r\n}"
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Track'
          text/json:
            schema:
              $ref: '#/components/schemas/Track'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Track'
      responses:
        '200':
          description: Track updated successfully.
        '400':
          description: If any of the required fields are missing or invalid.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Track not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
  /track/{id}/gpx:
    get:
      tags:
        - TrackControllers
      summary: Gets a GPX file
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Action successfull.
        '404':
          description: Track not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: If there is an internal server error.
components:
  schemas:
    Boat:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        class:
          type: string
          nullable: true
        sailNumber:
          type: string
          nullable: true
        skipper:
          type: string
          nullable: true
        ratingId:
          type: integer
          format: int32
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/Result'
          nullable: true
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
          nullable: true
        races:
          type: array
          items:
            $ref: '#/components/schemas/Race'
          nullable: true
      additionalProperties: false
    Course:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        courseMarks:
          type: array
          items:
            $ref: '#/components/schemas/CourseMark'
          nullable: true
      additionalProperties: false
    CourseMark:
      type: object
      properties:
        id:
          type: integer
          format: int32
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        description:
          type: string
          nullable: true
        rounding:
          type: boolean
          nullable: true
        isStartLine:
          type: boolean
          nullable: true
        gateId:
          type: integer
          format: int32
          nullable: true
        courseId:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: {}
    Race:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int32
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        name:
          type: string
          nullable: true
        participants:
          type: array
          items:
            $ref: '#/components/schemas/Boat'
          nullable: true
        courses:
          type: array
          items:
            $ref: '#/components/schemas/Course'
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/Result'
          nullable: true
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
          nullable: true
        regattaId:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    Regatta:
      required:
        - description
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        races:
          type: array
          items:
            $ref: '#/components/schemas/Race'
          nullable: true
      additionalProperties: false
    Result:
      required:
        - finishPosition
        - points
        - rating
      type: object
      properties:
        id:
          type: integer
          format: int32
        boatId:
          type: integer
          format: int32
        raceId:
          type: integer
          format: int32
        finishPosition:
          type: integer
          format: int32
        elapsedTime:
          type: string
          format: date-span
        correctedTime:
          type: string
          format: date-span
        rating:
          type: integer
          format: int32
        points:
          type: integer
          format: int32
        finishType:
          type: string
          nullable: true
      additionalProperties: false
    Track:
      required:
        - gpxData
        - id
      type: object
      properties:
        id:
          type: integer
          format: int32
        boatId:
          type: integer
          format: int32
        raceId:
          type: integer
          format: int32
        started:
          type: string
          format: date-time
        finished:
          type: string
          format: date-time
        distance:
          type: number
          format: float
        gpxData:
          type: string
          nullable: true
        currentRating:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    UpdateCourseDTO:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    UpdateCourseMarkDTO:
      type: object
      properties:
        latitude:
          type: number
          format: float
          nullable: true
        longitude:
          type: number
          format: float
          nullable: true
        description:
          type: string
          nullable: true
        rounding:
          type: boolean
          nullable: true
        isStartLine:
          type: boolean
          nullable: true
        gateId:
          type: integer
          format: int32
          nullable: true
        courseId:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
